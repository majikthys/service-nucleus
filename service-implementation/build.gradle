apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'cargo'

// set base name (impacts war name and context path)
project.war.baseName = 'hello-world'

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

buildscript {
    repositories { mavenCentral() }
    apply from: file('../gradle/buildscript.gradle'), to: buildscript
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6'
    }

}

configurations {
	swaggerDoclet 
}

allprojects {
    repositories { mavenCentral() }
	configurations.all {
		// This is an incubating gradle language feature (as of 1.5) allowing, in this 
		// case, for FOO.pom to be swapped for any sub-dependencies of BAR.pom.
	    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
	        if (details.requested.name == 'slf4j-simple') {
	            //prefer 'slf4j-log4j2' over 'slf4j-simple', because
				//it's required that only one logger.jar be present for deterministic behavior of slf4j
				details.useTarget "org.apache.logging.log4j:log4j-slf4j-impl:2.0-beta7"
	        }

	
	    }
		
	}
}

apply from: file('../gradle/convention.gradle')
apply from: file('../gradle/maven.gradle')
apply from: file('../gradle/check.gradle')
apply from: file('../gradle/license.gradle')

war {

    from('resources') {
        include '*.properties'
        into 'WEB-INF/classes/'
    }

    // TODO
    // Resources used for the Dynamic Services landing page are intentionally kept in the
    // service-framework module (where dynamic services framework is also defined), and
    // outside of the service-implementation.  Eventually the service-framework will be an
    // artifact, and we will be unable to pull in resources like this.
    from('../service-framework/src/main/resources') {
        include '**/**';
        into 'WEB-INF/classes/'
    }

    // TODO Needed?  I believe is is, since this is not
    // the conventional location for webapp root
    from('src/main/webapp/') {
        include '**/**';
        into '/'
    }

    //webXml = file('src/main/webapp/WEB-INF/web.xml')
}

dependencies {

	compile 'com.netflix.eureka:eureka-client:1.1.97'

	compile 'org.slf4j:slf4j-api:1.7.5'
	//compile 'org.slf4j:slf4j-log4j12:1.7.5'
	
	def log4j2Version = '2.0-beta7';
	compile "org.apache.logging.log4j:log4j-api:$log4j2Version"
	compile "org.apache.logging.log4j:log4j-core:$log4j2Version"
	compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"
	
    compile "com.netflix.karyon:karyon-extensions:${karyonVersion}" 

    compile project(':karyon-admin-web')
    compile project(':service-framework')

    // ************************************* beg cargo *********************************************
    def cargoVersion = "1.4.0"
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
            "org.codehaus.cargo:cargo-ant:$cargoVersion"
    // ************************************* end cargo *********************************************

	//		NOTE: 'com.hypnoticocelot:jaxrs-doclet:0.0.3-SNAPSHOT' is not kept up to date!
    // ./lib/jaxrs-doclet-0.0.3-SNAPSHOT.jar built from http://gitlab.hs.com/g2/swagger-jaxrs-doclet
	swaggerDoclet files ('./lib/jaxrs-doclet-0.0.3-SNAPSHOT.jar')
	
			
}


def compiledClasses = files("${buildDir}/classes/main/")
def swaggerUIZip = "$projectDir/src/main/resources/swaggerUI.zip"
def swaggerUIOutput = new File("$buildDir/docs/swaggerJSON")
task swaggerUIOutputDir << {
	swaggerUIOutput.mkdirs()
	// do something
}

//builds swagger doclet dir... note that story around doclet isn't full baked.
//output of this task needs to be deployed to http server to be usable.
//It's recommended that you use "live" swagger typically located http://localhost:8989/hello-world/swagger-ui/index.html
task buildSwaggerDoclet (description: 'Generates Static Swagger UI', group: 'Documentation') {
	
	logger.info("Swagger Doclet")
	logger.info("$swaggerUIOutput")
	logger.info("$swaggerDocletApiBasePath")
	
	doLast {
		ant.javadoc(
				//source: sourceSets.main.allJava
				classpath: project.runtimeClasspath.asPath,
				docletpath: (compiledClasses + configurations.swaggerDoclet).asPath,
				destdir:"$swaggerUIOutput" ) {
					packageset(dir:file('src/main/java'), defaultexcludes:'yes') { include(name:'com/**') }
					doclet( name:'com.hypnoticocelot.jaxrs.doclet.ServiceDoclet')
					{
						//-apiVersion 1 -docBasePath /apidocs -apiBasePath /
					param(name:'-swaggerUiZipPath', value:"$swaggerUIZip")
						
					 param(name:'-apiVersion', value:'1.0.0')
// doclet only does 1.1					 param(name:'-swaggerVersion', value:'1.2')
					 param(name:'-docBasePath', value:'')
					 param(name:'-apiBasePath', value:"$swaggerDocletApiBasePath")
					 param(name:'-verbose', value:true)
					 
					}
				}
	}
}

buildSwaggerDoclet.dependsOn('swaggerUIOutputDir')
// Cargo is a thin wrapper that allows you to manipulate Java EE containers in a standard way.
// http://cargo.codehaus.org/
cargo {
    containerId = 'tomcat7x'
    port = new Integer(tomcatHttpPort)
    
    deployable{
        // NOTE: Override file to make it pick up an existing war instead of that produce by running other tasks
        //        file = file('target/contivo-conversion-service-0.0.1.war')
        context = project.war.baseName

        // wait on this URL before continuing
        def pingURL = "http://localhost:${tomcatHttpPort}/${project.war.baseName}/v1/hello/to/world"
    }

    local {
        // NOTE: uncomment following line to use existing tomcat install
        // homeDir = file('/Library/Tomcat')    // TODO should be set from CATALINA_HOME
        // output = file('build/tomcat-out.log')

        // TODO INSTALL OUTSIDE OF BUILDDIR... SO CLEAN DOESN'T KILL TOMCAT INSTALL UNLESS EXPLICITLY TOLD TO DO SO.
        installer {
            installUrl = "http://apache.osuosl.org/tomcat/tomcat-7/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
            downloadDir = file("$buildDir/download") 
            extractDir = file("$buildDir/extract")
        }

       tomcat {
            ajpPort = new Integer(tomcatAjpPort)
        }

        if(containerJVMArgs) {
            jvmArgs = "$containerJVMArgs"        
        } else {
            jvmArgs = "-Darchaius.deployment.applicationId=${project.war.baseName} -Darchaius.deployment.environment=dev"
        }
           
        // if containerDebug, append tomcat debug args to jvm args
        if(containerDebug) {
            jvmArgs += " $containerDebugJVMArgs"
        }
        
        logger.info "=====jvmArgs===="
        logger.info "$jvmArgs"
    }
}

// set properties before starting Jetty (via jettyRun or jettyRunWar)
task jettyRunSetProperties {
	logger.info "Setting jettyRun system properties"
    // use the default port of the ws-backend-simulation module
    System.setProperty('archaius.deployment.applicationId', project.war.baseName)
    System.setProperty('archaius.deployment.environment', 'dev')
    // we only use jettyRun in dev... might as well output log4j debug
    System.setProperty('log4j.debug', 'true') //TODO Is this correct for log4j2 -jfr
}


// jettyRun configuration properties
jettyRun {
	dependsOn 'jettyRunSetProperties'
	logger.info "Running jetty"
    httpPort = new Integer(jettyHttpPort)
    reload = 'automatic'
    scanIntervalSeconds = new Integer(jettyScanIntervalSeconds)
    daemon = false
}

